---
import dayjs from 'dayjs'

import CFImage from '$components/cfImage.astro'
import { getEvents } from '$functions/getEvents'

import type { Event } from '$functions/getEvents'

export interface Props {
  eventIds: {
    id: number
    ticketId: number
    code: string
  }[]
}

const { eventIds } = Astro.props

const events = await getEvents()
const selectedEvents = eventIds
  .map(({ id, code, ticketId }) => ({
    data: events.find(event => event.eventpopId === id) as Event,
    code,
    ticketId,
  }))
  .filter(o => o.data !== undefined)
  .sort((a, b) => b.data.date.unix() - a.data.date.unix())
---

<div class="mx-auto grid max-w-2xl gap-4 md:grid-cols-2">
  {
    selectedEvents.map(event => (
      <a
        href={`https://www.eventpop.me/tickets/${event.ticketId}#:~:text=E%2dTicket`}
      >
        <div class="flex h-24 overflow-hidden rounded-md bg-gradient-to-br from-neutral-700 to-neutral-800">
          <div class="aspect-square h-full shrink-0">
            <CFImage
              src={event.data.image}
              width={300}
              ratio={1}
              alt="cover"
              class={`h-full w-auto ${
                dayjs(event.data.endDate ?? event.data.date).isAfter(dayjs())
                  ? ''
                  : 'grayscale'
              }`}
            />
          </div>
          <div class="flex w-full flex-col justify-between px-4 py-2">
            <h1 class="line-clamp-2 font-medium text-white">
              {event.data.name}
            </h1>
            <p class="inline-flex items-center justify-end text-right text-xs text-gray-200">
              Ref:{' '}
              <span class="ml-1 rounded bg-gray-200 px-0.5 transition hover:bg-transparent">
                {event.code}
              </span>
            </p>
          </div>
        </div>
      </a>
    ))
  }
</div>
