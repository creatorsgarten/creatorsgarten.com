---
import type { WikiPageViewModel } from '$functions/wiki/getWikiPageViewModel'
import BaseLayout from '$layouts/base.astro'
import '@fontsource-variable/inter'
import { Icon } from 'react-iconify-icon-wrapper'
import ContentRenderer from './contentRenderer.astro'
import Head from './head.astro'
import WikiEditor from './wiki/editor.astro'
import WikiUpdateChecker from './wiki/updateChecker'
import WikiView from './wiki/view.astro'
import WikiViewShortcuts from './wiki/viewShortcuts.svelte'

export interface Props {
  viewModel: WikiPageViewModel
}

const { head, body, perf } = Astro.props.viewModel
---

<Head
  title={head.title}
  description={head.description}
  ogImage={head.ogImage}
/>

{
  body.mode === 'editor' || body.mode === 'view' ? (
    <WikiView
      pageRef={body.pageRef}
      title={body.title}
      headings={body.headings}
      parsedFrontMatter={body.parsedFrontMatter}
      lastModified={body.lastModified}
      lastModifiedBy={body.lastModifiedBy}
      editable={body.editable}
    >
      {body.mode === 'editor' ? (
        <WikiEditor pageRef={body.pageRef} file={body.file} />
      ) : (
        <Fragment>
          {body.validationError ? (
            <div class="relative mb-8 rounded border border-red-400 bg-red-100 px-4 py-3 text-red-700">
              <strong class="mr-2 font-bold">Invalid front matter:</strong>
              <span class="block sm:inline">{body.validationError}</span>
            </div>
          ) : null}
          <ContentRenderer content={body.html} pageRef={body.pageRef} />
          <WikiUpdateChecker
            initialContentHash={body.contentHash}
            pageRef={body.pageRef}
            client:idle
          />
          {body.filePath ? (
            <WikiViewShortcuts path={body.filePath} client:only="svelte" />
          ) : null}
        </Fragment>
      )}
    </WikiView>
  ) : (
    <BaseLayout>
      <div class="px-6 pb-10">
        <div class="relative mx-auto max-w-6xl">
          <h1 class="mb-8 text-3xl">{body.pageRef}</h1>
          <ContentRenderer content={body.html} pageRef={body.pageRef} />
          {body.editable && (
            <div class="mt-8 flex">
              <a
                href={`/wiki/${body.pageRef}/editor`}
                data-js="wiki-edit-link"
                class="inline-flex items-center space-x-2"
              >
                <span class="edit">Edit this page</span>
                <Icon icon="pixelarticons:edit" />
              </a>
            </div>
          )}
          <WikiUpdateChecker
            initialContentHash={body.contentHash}
            pageRef={body.pageRef}
            client:idle
          />
          {body.filePath ? (
            <WikiViewShortcuts path={body.filePath} client:only="svelte" />
          ) : null}
        </div>
      </div>
    </BaseLayout>
  )
}

<Fragment
  set:html={'<!-- ' + (perf || []).join('\n').replace(/--/g, 'â€”') + ' -->'}
/>
